//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ICP.BBDD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class bdsaidEntities2 : DbContext
    {
        public bdsaidEntities2()
            : base("name=bdsaidEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<NSERIES_RECEPCIONES> NSERIES_RECEPCIONES { get; set; }
        public virtual DbSet<NSERIES_SEGUIMIENTO> NSERIES_SEGUIMIENTO { get; set; }
        public virtual DbSet<ORDEN_SALIDA_CAB> ORDEN_SALIDA_CAB { get; set; }
        public virtual DbSet<ORDEN_SALIDA_LIN> ORDEN_SALIDA_LIN { get; set; }
        public virtual DbSet<PALET> PALETS { get; set; }
        public virtual DbSet<PICKING_LOG> PICKING_LOG { get; set; }
        public virtual DbSet<RECEPCIONES_CAB> RECEPCIONES_CAB { get; set; }
        public virtual DbSet<RECEPCIONES_LIN> RECEPCIONES_LIN { get; set; }
        public virtual DbSet<REFERENCIA> REFERENCIAS { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UBICACIONE> UBICACIONES { get; set; }
        public virtual DbSet<USUARIO> USUARIOS { get; set; }
        public virtual DbSet<V_DETALLE_ALMACENAMIENTO_TABLAS> V_DETALLE_ALMACENAMIENTO_TABLAS { get; set; }
        public virtual DbSet<V_DETALLE_FOREIGN_KEYS> V_DETALLE_FOREIGN_KEYS { get; set; }
        public virtual DbSet<V_GRANT> V_GRANT { get; set; }
        public virtual DbSet<V_SQL> V_SQL { get; set; }
        public virtual DbSet<V_SQL_CAMPOS_TABLA> V_SQL_CAMPOS_TABLA { get; set; }
        public virtual DbSet<V_SQL_FICHEROS> V_SQL_FICHEROS { get; set; }
        public virtual DbSet<V_SQL_INDICES_FRAGMENTACION> V_SQL_INDICES_FRAGMENTACION { get; set; }
        public virtual DbSet<V_SQL_TABLAS> V_SQL_TABLAS { get; set; }
        public virtual DbSet<VW_REFERENCIAS_STOCK> VW_REFERENCIAS_STOCK { get; set; }
        public virtual DbSet<VW_STOCK_DISPONIBLE> VW_STOCK_DISPONIBLE { get; set; }
        public virtual DbSet<PROVEEDORE> PROVEEDORES { get; set; }
    
        [DbFunction("bdsaidEntities2", "FN_OBTENER_SIGUIENTE_PICADA")]
        public virtual IQueryable<FN_OBTENER_SIGUIENTE_PICADA_Result> FN_OBTENER_SIGUIENTE_PICADA(Nullable<int> pETICION)
        {
            var pETICIONParameter = pETICION.HasValue ?
                new ObjectParameter("PETICION", pETICION) :
                new ObjectParameter("PETICION", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_OBTENER_SIGUIENTE_PICADA_Result>("[bdsaidEntities2].[FN_OBTENER_SIGUIENTE_PICADA](@PETICION)", pETICIONParameter);
        }
    
        public virtual int PA_CONFIRMAR_RECEPCION(string albaran, Nullable<System.DateTime> fechaConfirmacion)
        {
            var albaranParameter = albaran != null ?
                new ObjectParameter("Albaran", albaran) :
                new ObjectParameter("Albaran", typeof(string));
    
            var fechaConfirmacionParameter = fechaConfirmacion.HasValue ?
                new ObjectParameter("FechaConfirmacion", fechaConfirmacion) :
                new ObjectParameter("FechaConfirmacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PA_CONFIRMAR_RECEPCION", albaranParameter, fechaConfirmacionParameter);
        }
    
        public virtual int PA_ENVIAR_DBMAIL(string albaran, string resumen, string destinatario)
        {
            var albaranParameter = albaran != null ?
                new ObjectParameter("Albaran", albaran) :
                new ObjectParameter("Albaran", typeof(string));
    
            var resumenParameter = resumen != null ?
                new ObjectParameter("Resumen", resumen) :
                new ObjectParameter("Resumen", typeof(string));
    
            var destinatarioParameter = destinatario != null ?
                new ObjectParameter("Destinatario", destinatario) :
                new ObjectParameter("Destinatario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PA_ENVIAR_DBMAIL", albaranParameter, resumenParameter, destinatarioParameter);
        }
    
        public virtual int PA_MOVER_PALET(Nullable<int> paletId, string nuevaUbicacion)
        {
            var paletIdParameter = paletId.HasValue ?
                new ObjectParameter("PaletId", paletId) :
                new ObjectParameter("PaletId", typeof(int));
    
            var nuevaUbicacionParameter = nuevaUbicacion != null ?
                new ObjectParameter("NuevaUbicacion", nuevaUbicacion) :
                new ObjectParameter("NuevaUbicacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PA_MOVER_PALET", paletIdParameter, nuevaUbicacionParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_MARCAR_PICADA(Nullable<int> pETICION, Nullable<int> lINEA_ID, Nullable<int> cANTIDAD_PICADA, string uBICACION, string nUMERO_SERIE, string uSUARIO)
        {
            var pETICIONParameter = pETICION.HasValue ?
                new ObjectParameter("PETICION", pETICION) :
                new ObjectParameter("PETICION", typeof(int));
    
            var lINEA_IDParameter = lINEA_ID.HasValue ?
                new ObjectParameter("LINEA_ID", lINEA_ID) :
                new ObjectParameter("LINEA_ID", typeof(int));
    
            var cANTIDAD_PICADAParameter = cANTIDAD_PICADA.HasValue ?
                new ObjectParameter("CANTIDAD_PICADA", cANTIDAD_PICADA) :
                new ObjectParameter("CANTIDAD_PICADA", typeof(int));
    
            var uBICACIONParameter = uBICACION != null ?
                new ObjectParameter("UBICACION", uBICACION) :
                new ObjectParameter("UBICACION", typeof(string));
    
            var nUMERO_SERIEParameter = nUMERO_SERIE != null ?
                new ObjectParameter("NUMERO_SERIE", nUMERO_SERIE) :
                new ObjectParameter("NUMERO_SERIE", typeof(string));
    
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MARCAR_PICADA", pETICIONParameter, lINEA_IDParameter, cANTIDAD_PICADAParameter, uBICACIONParameter, nUMERO_SERIEParameter, uSUARIOParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_ASIGNAR_PEDIDO(Nullable<int> pETICION)
        {
            var pETICIONParameter = pETICION.HasValue ?
                new ObjectParameter("PETICION", pETICION) :
                new ObjectParameter("PETICION", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ASIGNAR_PEDIDO", pETICIONParameter);
        }
    
        public virtual int SP_REGISTRAR_NSERIE(Nullable<int> pETICION, Nullable<int> lINEA_ID, string nUMERO_SERIE, string uSUARIO, string rEF)
        {
            var pETICIONParameter = pETICION.HasValue ?
                new ObjectParameter("PETICION", pETICION) :
                new ObjectParameter("PETICION", typeof(int));
    
            var lINEA_IDParameter = lINEA_ID.HasValue ?
                new ObjectParameter("LINEA_ID", lINEA_ID) :
                new ObjectParameter("LINEA_ID", typeof(int));
    
            var nUMERO_SERIEParameter = nUMERO_SERIE != null ?
                new ObjectParameter("NUMERO_SERIE", nUMERO_SERIE) :
                new ObjectParameter("NUMERO_SERIE", typeof(string));
    
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            var rEFParameter = rEF != null ?
                new ObjectParameter("REF", rEF) :
                new ObjectParameter("REF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_REGISTRAR_NSERIE", pETICIONParameter, lINEA_IDParameter, nUMERO_SERIEParameter, uSUARIOParameter, rEFParameter);
        }
    }
}
